from astrodb_utils import load_astrodb
from astrodb_utils.sources import (
    find_source_in_db,
    AstroDBError,
    ingest_source,
    find_publication,
)

from astrodb_utils.publications import (
    ingest_publication,
    logger,
)

import sys

sys.path.append(".")
import logging
from astropy.io import ascii
from simple.schema import REFERENCE_TABLES
from math import isnan
import sqlalchemy.exc

"""logger = logging.getLogger(__name__)"""

DB_SAVE = False
RECREATE_DB = True
db = load_astrodb(
    "SIMPLE.sqlite", recreatedb=RECREATE_DB, reference_tables=REFERENCE_TABLES
)

#ingest doi publications because it isn't compatible with extractADS function
#comment out when DB_SAVE = True because publications and sources already exist in db
ingest_publication(db, doi="10.1088/0004-637X/748/2/93", reference = "Roja12") #Roja12
ingest_publication(db, doi = "10.1088/0067-0049/203/2/21", reference = "Ahn_12") #ahn_12
ingest_publication (db, bibcode = "2018MNRAS.479.1383Z", reference = "Zhan18.1352")
ingest_publication (db, bibcode = "2018MNRAS.480.5447Z", reference = "Zhan18.2054")
ingest_source(
    db,
    "ULAS J074431.30+283915.6",
    search_db = True,
    reference = "Ahn_12",
)

ingest_source(
    db,
    "LHS 292",
    search_db=True,
    reference="Roja12",
)

# Load photometry sheet
link = (
    "scripts/ingests/bones_archive/bones_archive_photometry_ads.csv"
)

# read the csv data into an astropy table
bones_sheet_table = ascii.read(
    link,
    format="csv",
    data_start=1,
    header_start=0,
    guess=False,
    fast_reader=False,
    delimiter=",",
)

ingested = 0
already_exists = 0
skipped= 0

#helper method for extracting ads key from link
def extractADS(link):
    start = link.find('abs/')+4
    end = link.find('/abstract')
    ads = link[start:end]
    ads = ads.replace("%26", "&")
    return ads


for source in bones_sheet_table:
    bones_name = source["NAME"].replace("\\u2212", "-")
    bones_name = source["NAME"].replace("\\u2013", "-")
    match = None

    ##tries to find match of name in database
    if len(bones_name) > 0 and bones_name != "null":
        match = find_source_in_db(
            db,
            bones_name,
            ra=source["RA"],
            dec=source["DEC"],

        )

        if (match == None):
            match = find_source_in_db(
                db,
                bones_name,
                ra=source["RA"],
                dec=source["DEC"],
            )
                
        if len(match) == 0:
            #ingest_publications for ads
            ads = extractADS(source["ADS_Link"])
            ads_match = None
            ref = source["Discovery Ref."]
            ads_match = find_publication(db = db, bibcode = ads)

            #if ads not in db, ingest
            if ads_match[0] == False:
                ingest_publication(db = db, bibcode = ads,)
            
            try:

                reference = find_publication(db = db, bibcode = ads)
                ra = source["RA"]
                dec = source["DEC"]

                #if publication not found in database, skip
                # doesn't make sense because we're supposed to ingest publications before...
                if reference[1] == 0:
                    skipped+=1
                    continue

                ingest_source(
                    db,
                    source = bones_name,
                    reference = reference[1],
                    ra = ra,
                    dec = dec,
                    raise_error = True,
                    search_db = True,
                )  # ingest new sources
                ingested += 1
            except AstroDBError as e:
                #None only error is if there is a preexisting source anyways.
                msg = "ingest failed with error: " + str(e)
                logger.warning(msg)
                if "Already in database" in str(e):
                    already_exists+=1
                    continue
                else:
                    raise AstroDBError(msg) from e
        
        elif len(match) == 1:
            already_exists+=1
            skipped+=1
        else:
            skipped+=1
            a = AstroDBError
            logger.warning("ingest failed with error: " + str(a))
            raise AstroDBError(msg) from a
    else:
        skipped+=1
        
total = len(bones_sheet_table)
logger.info(f"ingested:{ingested}")  # 105 ingested
logger.info(f"already exists:{already_exists}")  # 103 due to preexisting data
logger.info(f"skipped:{skipped}")  # 104 skipped
logger.info(f"total:{total}") # 209 total
if DB_SAVE:
    db.save_database(directory="data/")
