from astrodb_utils import (
    load_astrodb,
    find_source_in_db,
    AstroDBError,
    ingest_names,
    ingest_source,
    ingest_publication,
)
from astrodb_utils.photometry import ingest_photometry
import sys





sys.path.append(".")
import logging
from astropy.io import ascii
from simple.schema import REFERENCE_TABLES
from math import isnan
import sqlalchemy.exc
from simple.utils.astrometry import ingest_parallax



logger = logging.getLogger(__name__)

# Logger setup
# This will stream all logger messages to the standard output and
# apply formatting for that
logger.propagate = False  # prevents duplicated logging messages
LOGFORMAT = logging.Formatter(
    "%(asctime)s %(levelname)s: %(message)s", datefmt="%m/%d/%Y %I:%M:%S%p"
)
ch = logging.StreamHandler(stream=sys.stdout)
ch.setFormatter(LOGFORMAT)
# To prevent duplicate handlers, only add if they haven't been set previously
if len(logger.handlers) == 0:
    logger.addHandler(ch)
logger.setLevel(logging.INFO)

DB_SAVE = False
RECREATE_DB = True
db = load_astrodb(
    "SIMPLE.sqlite", recreatedb=RECREATE_DB, reference_tables=REFERENCE_TABLES
)

# Load Ultracool sheet
link = (
    "scripts/ingests/bones_archive/bones_archive_photometry.csv"
)

# read the csv data into an astropy table
bones_sheet_table = ascii.read(
    link,
    format="csv",
    data_start=1,
    header_start=0,
    guess=False,
    fast_reader=False,
    delimiter=",",
)

no_sources = 0
multiple_sources = 0
ingested = 0
already_exists = 0
skipped= 0

for source in bones_sheet_table:
    bones_name = source["NAME"]
    match = None

    ##tries to find match of name in database
    ##if found, ingest
    if len(bones_name) > 0 and bones_name != "null":
        match = find_source_in_db(
            db,
            source["NAME"],
            ra=source["RA"],
            dec=source["DEC"],
        )
        if len(match) == 1:
            try:
                reference = source["Discovery Ref."]
                ra = source["RA"]
                dec = source["DEC"]
                comment = "comments"
                equinox = "equinox"
                other_references = "other_references"
                epoch = "epoch"
                ingest_source(
                    db, 
                    match[0], 
                    reference = reference,
                    ra = ra,
                    dec = dec,
                    epoch = epoch,
                    equinox = equinox,
                    other_reference = other_references,
                    comment = comment,
                    raise_error = True,
                    search_db = True,
                )  # ingest new sources
                ingested += 1
            except AstroDBError as e:
                None  # only error is if there is a preexisting source anyways.

        if(match == None):
            match = find_source_in_db(
                db,
                source("NAME"),
                ra=source["RA"],
                dec=source["DEC"],
            )
        
        if len(match) == 0:
            no_sources +=1
        elif len(match) > 1:
            multiple_sources += 1
            skipped+=1
        if len(match) == 0:
            simple_source = match[0]
            try: 
                reference = source["Discovery Ref."]
                ra = source["RA"]
                dec = source["DEC"]
                comment = "comments"
                equinox = "equinox"
                other_references = "other_references"
                epoch = "epoch"
                ingest_source(
                    db,
                    source = simple_source,
                    reference = reference,
                    ra = ra,
                    dec = dec,
                    epoch = epoch,
                    equinox = equinox,
                    other_reference = other_references,
                    comment = comment,
                    raise_error = True,
                    search_db = True,
                    
                )
                ingested+=1
            except AstroDBError as e:
                msg = "ingest failed with error: " + str(e)
                logger.warning(msg)
                if "Already in database" in str(e):
                    already_exists+=1
                    continue
                else:
                    raise AstroDBError(msg) from e
                
logger.info(f"ingested:{ingested}")  #  ingested
logger.info(f"already exists:{already_exists}")  #  due to preexisting data
logger.info(f"no sources:{no_sources}")  # due to 0 matches
logger.info(f"multiple sources:{multiple_sources}")  # multiple matches
logger.info(f"skipped:{skipped}")  # 
if DB_SAVE:
    db.save_database(directory="data/")


