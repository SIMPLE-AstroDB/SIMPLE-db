import sys
import logging
import sqlalchemy
sys.path.append(".")
from astropy.io import ascii
from simple import REFERENCE_TABLES
from astrodb_utils import load_astrodb
from astrodb_utils.sources import (
    logger,
    AstroDBError,
    ingest_source,
    ingest_name
)
from astrodb_utils.publications import (
    find_publication,
)

from simple.utils.spectral_types import (
    ingest_spectral_type
)

astrodb_utils_logger = logging.getLogger("astrodb_utils")
logger.setLevel(logging.DEBUG)  # Set logger to INFO/DEBUG/WARNING/ERROR/CRITICAL level
astrodb_utils_logger.setLevel(logging.DEBUG)

SAVE_DB = True  # save the data files in addition to modifying the .db file
RECREATE_DB = True  # recreates the .db file from the data files
SCHEMA_PATH = "simple/schema.yaml"
db = load_astrodb(
    "SIMPLE.sqlite",
    recreatedb=RECREATE_DB,
    reference_tables=REFERENCE_TABLES,
    felis_schema=SCHEMA_PATH,
)

link = (
    "scripts/ingests/calamari/calamari_data.csv"
)
link_2 = (
    "scripts/ingests/calamari/calamari_refs.csv"
)

calamari_table = ascii.read(
    link,
    format="csv",
    data_start=1,
    header_start=0,
    guess=False,
    fast_reader=False, 
    delimiter=",",
)

ref_table = ascii.read(
    link_2,
    format="csv",
    data_start=0,
    header_start=0,
    guess=False,
    fast_reader=False, 
    delimiter=",",
)

spectral_types_ingested = 0
sources_ingested = 0
spectral_types_already_exist = 0
binaries = [
    "HD 130948BC",
    "HD 130948C",
    "HD 130948B",
    "Gl 337CD",
    "Gl 337C",
    "Gl 337D",
    "Gl 417BC",
    "Gl 417B",
    "Gl 417C"
]

#helper method to retrieve the publication links from calamari_data
def getRef(ref_index):
    ref = ref_index.split(',')[0]
    ref_link = ref_table[int(ref)]['ADS']
    if 'iopscience' not in ref_link or 'harvard.edu' not in ref_link:
        ref_link = ref_table[int(ref)]['Link']
    return ref_link

#helper method to retrieve the bibcode from a link
def extractADS(link):
    start = link.find('abs/')+4
    end = link.find('/abstract')
    ads = link[start:end]
    ads = ads.replace("%26", "&")
    return ads

#helper method to retrieve the doi from a link
def extractDOI(link):
    link = str(link)
    if 'iopscience' in link:
        start = link.find('article/')+8
        doi = link[start:]
        doi = doi.replace("/pdf", "")
    else:
        start = link.find('doi.org/')+8
        doi=link[start:]
    return doi

def otherReferencesList(ref):
    #get all the ids/indexes of the references
    ids = ref.split(", ")
    result = []
    #for each reference...
    for id in ids:
        link = ref_table[int(id)]['ADS']
        #if bibcode or doi is not directly in the link... go to Link column
        if 'iopscience' not in link or 'harvard.edu' not in link:
            link = ref_table[int(id)]['Link']
        #if bibcode is directly in the link
        if 'harvard.edu' in link:
            bibcode = extractADS(link)
            pub_result=find_publication(
                db=db,
                bibcode=bibcode
            )
            if pub_result[0]:
                result.append(pub_result[1])
            else:
                print(f"Warning: Publication not found for bibcode {bibcode}")
            #if doi code is found directly in the link
        elif 'iopscience' in link or 'doi.org' in link:
            doi=extractDOI(link)
            pub_result=find_publication(
                db=db,
                doi=doi
            )
            if pub_result[0]:
                result.append(pub_result[1])
            else:
                print(f"Warning: Publication not found for doi {doi}")
        #use reference name to find reference
        else:
            reference= ref_table[int(id)]['Ref']
            reference= reference.replace("+", "")
            reference=reference[0:4] + reference[-2:]
            pub_result=find_publication(
                db=db,
                reference=reference
            )
            if pub_result[0]:
                result.append(pub_result[1])
            else:
                print(f"Warning: Publication not found for reference {reference}")
    #return list of references
    return result

# sources Gl 337CD and Gl 417BC do not exist in the database. ingest them.
def ingest_resolved_children(
    db,
    source,
    reference: str,
    *,
    ra: float = None,
    dec: float = None,
    epoch: str = None,
    equinox: str = None,
    other_reference: str = None,
    comment: str = None,
    raise_error: bool = True,
    ra_col_name: str = "ra",
    dec_col_name: str = "dec",
    epoch_col_name: str = "epoch",
):
    # Construct data to be added
    source_data = [
        {
            "source": source,
            ra_col_name: ra,
            dec_col_name: dec,
            "reference": reference,
            epoch_col_name: epoch,
            "equinox": equinox,
            "other_references": other_reference,
            "comments": comment,
        }
    ]
    logger.debug(f"   Data: {source_data}.")

    # Try to add the source to the database
    try:
        with db.engine.connect() as conn:
            conn.execute(db.Sources.insert().values(source_data))
            conn.commit()
        msg = f"Added {source_data}"
        logger.info(f"Added {source}")
        logger.debug(msg)
    except sqlalchemy.exc.IntegrityError:
        msg = f"Not ingesting {source}. Not sure why. \n"
        msg2 = f"   {source_data} "
        logger.warning(msg)
        logger.debug(msg2)

    # Add the source name to the Names table
    ingest_name(db, source=source, other_name=source, raise_error=raise_error)
    return

#ingest Gl 337CD
ingest_resolved_children(
    db=db,
    source = "Gl 337CD",
    reference = "GaiaEDR3",
    ra = 138.0584919,
    dec=14.9956706,
    ra_col_name="ra",
    dec_col_name="dec",
    other_reference="Wils01"
)
sources_ingested+=1

ingest_resolved_children(
    db=db,
    source = "Gl 417BC",
    reference="GaiaEDR3",
    ra = 168.1055653,
    dec = 35.8028953,
    ra_col_name="ra",
    dec_col_name="dec",
    other_reference="Kirk00"
)
sources_ingested+=1

for row in calamari_table:
    object = row["Object"]
    object_spt = row["SpT_Secondary"]
    ignore_neighbors = False

    if object == "WISE J124332.17+600126.6":
        ingest_spectral_type(
            db=db,
            source = object,
            spectral_type_string=object_spt,
            reference = "Fahe21",
            regime = "unknown",
        )
        spectral_types_ingested+=1
        continue
    if object == "2MASS J00250365+4759191":
        ingest_spectral_type(
            db=db,
            source = object,
            spectral_type_string=object_spt,
            reference="Reid06.891",
            regime = "unknown"
        )
        spectral_types_ingested+=1
        continue
    
    reference = otherReferencesList(row["Ref"])[0]

    if object in binaries:
        ignore_neighbors=True
    try:
        #ingest spectral types for the objects
        ingest_spectral_type(
            db=db,
            source = object,
            spectral_type_string=object_spt,
            regime = "unknown",
            reference = reference,
            ignore_neighbors=ignore_neighbors
        )
        spectral_types_ingested+=1
        logger.info(f"ingested spectral type for {object}")
    except AstroDBError as e:
        msg = "ingest failed with error: " + str(e)
        logger.warning(msg)
        if "Spectral type already in the database" in str(e):
            spectral_types_already_exist+=1
        else:
            raise e
        
logger.info(f"Spectral type already exists: {spectral_types_already_exist}") # 0 already exists in database
logger.info(f"Spectral types ingested: {spectral_types_ingested}") # 62 spectral types ingested
logger.info(f"sources ingested: {sources_ingested}") # sources ingested
logger.info(f"total: {spectral_types_ingested+spectral_types_already_exist}")  # 64 total spectral types
if SAVE_DB:
    db.save_database(directory="data/")